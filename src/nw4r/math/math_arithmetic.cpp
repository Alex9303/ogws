#ifdef __DECOMP_NON_MATCHING

#include "math_arithmetic.h"
#include "math_types.h"

namespace nw4r
{
    namespace math
    {
        namespace
        {
            struct FloatTableEntry
            {
                f32 mValue;
                f32 mDeltaToNext;
            };

            static FloatTableEntry sExpTbl[] = {
                0.5000000f, 0.0221369f, 0.5221369f, 0.0231170f, 0.5452539f, 0.0241405f,
                0.5693943f, 0.0252092f, 0.5946035f, 0.0263253f, 0.6209289f, 0.0274909f,
                0.6484198f, 0.0287080f, 0.6771278f, 0.0299790f, 0.7071068f, 0.0313063f,
                0.7384131f, 0.0326923f, 0.7711054f, 0.0341398f, 0.8052452f, 0.0356512f,
                0.8408964f, 0.0372297f, 0.8781261f, 0.0388780f, 0.9170040f, 0.0405992f,
                0.9576033f, 0.0423967f, 1.0000000f, 0.0442738f, 1.0442737f, 0.0462339f,
                1.0905077f, 0.0482809f, 1.1387886f, 0.0504185f, 1.1892071f, 0.0526507f,
                1.2418578f, 0.0549817f, 1.2968396f, 0.0574160f, 1.3542556f, 0.0599580f,
                1.4142135f, 0.0626126f, 1.4768262f, 0.0653847f, 1.5422108f, 0.0682795f,
                1.6104903f, 0.0713025f, 1.6817929f, 0.0744593f, 1.7562522f, 0.0777559f,
                1.8340081f, 0.0811985f, 1.9152066f, 0.0847934f, 2.0000000f, 0.0885476f
            };

            static FloatTableEntry sLogTbl[] = {
                0.0000000f, 0.0038986f, 0.0038986f, 0.0038835f, 0.0077821f, 0.0038685f,
                0.0116506f, 0.0038536f, 0.0155042f, 0.0038388f, 0.0193430f, 0.0038241f,
                0.0231671f, 0.0038095f, 0.0269766f, 0.0037951f, 0.0307717f, 0.0037807f,
                0.0345524f, 0.0037665f, 0.0383189f, 0.0037524f, 0.0420712f, 0.0037383f,
                0.0458095f, 0.0037244f, 0.0495339f, 0.0037106f, 0.0532445f, 0.0036969f,
                0.0569414f, 0.0036832f, 0.0606246f, 0.0036697f, 0.0642944f, 0.0036563f,
                0.0679507f, 0.0036430f, 0.0715936f, 0.0036298f, 0.0752234f, 0.0036166f,
                0.0788401f, 0.0036036f, 0.0824437f, 0.0035907f, 0.0860343f, 0.0035778f,
                0.0896122f, 0.0035651f, 0.0931772f, 0.0035524f, 0.0967296f, 0.0035398f,
                0.1002695f, 0.0035273f, 0.1037968f, 0.0035149f, 0.1073117f, 0.0035026f,
                0.1108144f, 0.0034904f, 0.1143048f, 0.0034783f, 0.1177830f, 0.0034662f,
                0.1212492f, 0.0034542f, 0.1247035f, 0.0034423f, 0.1281458f, 0.0034305f,
                0.1315764f, 0.0034188f, 0.1349952f, 0.0034072f, 0.1384023f, 0.0033956f,
                0.1417979f, 0.0033841f, 0.1451820f, 0.0033727f, 0.1485547f, 0.0033613f,
                0.1519160f, 0.0033501f, 0.1552661f, 0.0033389f, 0.1586050f, 0.0033278f,
                0.1619328f, 0.0033168f, 0.1652496f, 0.0033058f, 0.1685554f, 0.0032949f,
                0.1718503f, 0.0032841f, 0.1751343f, 0.0032733f, 0.1784077f, 0.0032626f,
                0.1816703f, 0.0032520f, 0.1849223f, 0.0032415f, 0.1881638f, 0.0032310f,
                0.1913949f, 0.0032206f, 0.1946155f, 0.0032103f, 0.1978257f, 0.0032000f,
                0.2010257f, 0.0031898f, 0.2042155f, 0.0031797f, 0.2073952f, 0.0031696f,
                0.2105648f, 0.0031596f, 0.2137243f, 0.0031496f, 0.2168739f, 0.0031397f,
                0.2200137f, 0.0031299f, 0.2231435f, 0.0031201f, 0.2262637f, 0.0031104f,
                0.2293741f, 0.0031008f, 0.2324749f, 0.0030912f, 0.2355661f, 0.0030817f,
                0.2386477f, 0.0030722f, 0.2417199f, 0.0030628f, 0.2447827f, 0.0030534f,
                0.2478362f, 0.0030441f, 0.2508803f, 0.0030349f, 0.2539152f, 0.0030257f,
                0.2569409f, 0.0030166f, 0.2599575f, 0.0030075f, 0.2629651f, 0.0029985f,
                0.2659636f, 0.0029895f, 0.2689531f, 0.0029806f, 0.2719337f, 0.0029718f,
                0.2749055f, 0.0029630f, 0.2778684f, 0.0029542f, 0.2808227f, 0.0029455f,
                0.2837682f, 0.0029369f, 0.2867050f, 0.0029283f, 0.2896333f, 0.0029197f,
                0.2925530f, 0.0029112f, 0.2954642f, 0.0029028f, 0.2983670f, 0.0028944f,
                0.3012613f, 0.0028860f, 0.3041473f, 0.0028777f, 0.3070250f, 0.0028694f,
                0.3098945f, 0.0028612f, 0.3127557f, 0.0028531f, 0.3156088f, 0.0028450f,
                0.3184537f, 0.0028369f, 0.3212906f, 0.0028289f, 0.3241195f, 0.0028209f,
                0.3269404f, 0.0028129f, 0.3297533f, 0.0028051f, 0.3325583f, 0.0027972f,
                0.3353556f, 0.0027894f, 0.3381450f, 0.0027816f, 0.3409266f, 0.0027739f,
                0.3437005f, 0.0027663f, 0.3464668f, 0.0027586f, 0.3492254f, 0.0027510f,
                0.3519764f, 0.0027435f, 0.3547199f, 0.0027360f, 0.3574559f, 0.0027285f,
                0.3601844f, 0.0027211f, 0.3629055f, 0.0027137f, 0.3656192f, 0.0027064f,
                0.3683256f, 0.0026991f, 0.3710246f, 0.0026918f, 0.3737164f, 0.0026846f,
                0.3764010f, 0.0026774f, 0.3790784f, 0.0026702f, 0.3817486f, 0.0026631f,
                0.3844117f, 0.0026560f, 0.3870677f, 0.0026490f, 0.3897167f, 0.0026420f,
                0.3923588f, 0.0026350f, 0.3949938f, 0.0026281f, 0.3976219f, 0.0026212f,
                0.4002432f, 0.0026144f, 0.4028575f, 0.0026076f, 0.4054651f, 0.0026008f,
                0.4080659f, 0.0025940f, 0.4106599f, 0.0025873f, 0.4132473f, 0.0025806f,
                0.4158279f, 0.0025740f, 0.4184019f, 0.0025674f, 0.4209693f, 0.0025608f,
                0.4235301f, 0.0025543f, 0.4260844f, 0.0025478f, 0.4286322f, 0.0025413f,
                0.4311735f, 0.0025349f, 0.4337083f, 0.0025284f, 0.4362368f, 0.0025221f,
                0.4387589f, 0.0025157f, 0.4412746f, 0.0025094f, 0.4437840f, 0.0025031f,
                0.4462871f, 0.0024969f, 0.4487840f, 0.0024907f, 0.4512746f, 0.0024845f,
                0.4537591f, 0.0024783f, 0.4562374f, 0.0024722f, 0.4587096f, 0.0024661f,
                0.4611757f, 0.0024600f, 0.4636357f, 0.0024540f, 0.4660897f, 0.0024480f,
                0.4685377f, 0.0024420f, 0.4709797f, 0.0024361f, 0.4734158f, 0.0024301f,
                0.4758459f, 0.0024242f, 0.4782701f, 0.0024184f, 0.4806885f, 0.0024125f,
                0.4831011f, 0.0024067f, 0.4855078f, 0.0024010f, 0.4879088f, 0.0023952f,
                0.4903040f, 0.0023895f, 0.4926935f, 0.0023838f, 0.4950773f, 0.0023781f,
                0.4974554f, 0.0023725f, 0.4998279f, 0.0023669f, 0.5021948f, 0.0023613f,
                0.5045560f, 0.0023557f, 0.5069117f, 0.0023502f, 0.5092619f, 0.0023447f,
                0.5116066f, 0.0023392f, 0.5139458f, 0.0023337f, 0.5162795f, 0.0023283f,
                0.5186077f, 0.0023229f, 0.5209306f, 0.0023175f, 0.5232481f, 0.0023121f,
                0.5255603f, 0.0023068f, 0.5278671f, 0.0023015f, 0.5301686f, 0.0022962f,
                0.5324648f, 0.0022910f, 0.5347558f, 0.0022857f, 0.5370415f, 0.0022805f,
                0.5393220f, 0.0022753f, 0.5415973f, 0.0022701f, 0.5438674f, 0.0022650f,
                0.5461324f, 0.0022599f, 0.5483924f, 0.0022548f, 0.5506471f, 0.0022497f,
                0.5528969f, 0.0022447f, 0.5551415f, 0.0022396f, 0.5573812f, 0.0022346f,
                0.5596158f, 0.0022297f, 0.5618454f, 0.0022247f, 0.5640702f, 0.0022198f,
                0.5662899f, 0.0022148f, 0.5685048f, 0.0022099f, 0.5707147f, 0.0022051f,
                0.5729197f, 0.0022002f, 0.5751200f, 0.0021954f, 0.5773154f, 0.0021906f,
                0.5795059f, 0.0021858f, 0.5816917f, 0.0021810f, 0.5838728f, 0.0021763f,
                0.5860490f, 0.0021716f, 0.5882206f, 0.0021668f, 0.5903875f, 0.0021622f,
                0.5925496f, 0.0021575f, 0.5947071f, 0.0021529f, 0.5968599f, 0.0021482f,
                0.5990082f, 0.0021436f, 0.6011518f, 0.0021390f, 0.6032909f, 0.0021345f,
                0.6054253f, 0.0021299f, 0.6075553f, 0.0021254f, 0.6096807f, 0.0021209f,
                0.6118016f, 0.0021164f, 0.6139179f, 0.0021119f, 0.6160299f, 0.0021075f,
                0.6181374f, 0.0021031f, 0.6202404f, 0.0020986f, 0.6223391f, 0.0020942f,
                0.6244333f, 0.0020899f, 0.6265231f, 0.0020855f, 0.6286086f, 0.0020812f,
                0.6306898f, 0.0020768f, 0.6327667f, 0.0020725f, 0.6348392f, 0.0020683f,
                0.6369075f, 0.0020640f, 0.6389714f, 0.0020597f, 0.6410312f, 0.0020555f,
                0.6430867f, 0.0020513f, 0.6451380f, 0.0020471f, 0.6471850f, 0.0020429f,
                0.6492280f, 0.0020387f, 0.6512667f, 0.0020346f, 0.6533013f, 0.0020305f,
                0.6553317f, 0.0020263f, 0.6573581f, 0.0020222f, 0.6593803f, 0.0020182f,
                0.6613985f, 0.0020141f, 0.6634126f, 0.0020101f, 0.6654226f, 0.0020060f,
                0.6674287f, 0.0020020f, 0.6694307f, 0.0019980f, 0.6714287f, 0.0019940f,
                0.6734227f, 0.0019901f, 0.6754127f, 0.0019861f, 0.6773988f, 0.0019822f,
                0.6793810f, 0.0019782f, 0.6813592f, 0.0019743f, 0.6833336f, 0.0019704f,
                0.6853040f, 0.0019666f, 0.6872706f, 0.0019627f, 0.6892333f, 0.0019589f,
                0.6911922f, 0.0019550f, 0.6931472f, 0.0019512f
            };
            
            f32 FExpLn2(f32 x)
            {
                f32 val = (16.0f / NW4R_LN_2) * (NW4R_LN_2 + x);
                u16 val_s = F32ToU16(val);
                f32 val_f = U16ToF32(val_s);

                return sExpTbl[val_s].mValue + (val - val_f) * sExpTbl[val_s].mDeltaToNext;
            }

            f32 FLog1_2(f32 x)
            {
                f32 val = 256.0f * (x - 1.0f);
                u16 val_s = F32ToU16(val);
                f32 val_f = U16ToF32(val_s);

                return sLogTbl[val_s].mValue + (val - val_f) * sLogTbl[val_s].mDeltaToNext;
            }
        }

        namespace detail
        {
			f32 FExp(f32 x)
            {
                s16 val_s = F32ToS16(NW4R_MATH_BLOG_TO_LN * x);
                f32 val_f = S16ToF32(val_s);
                f32 expLn2 = FExpLn2(x - NW4R_LN_2 * val_f);
                u32 val_ul = F32AsU32(expLn2);
                return U32AsF32(((val_s << 23) + val_ul) & 0x7FFFFFFF); 
            }

			f32 FLog(f32 x)
            {
                s32 exp = FGetExpPart(x);
                f32 mant = FGetMantPart(x);
                f32 exp_f = S16ToF32((s16)exp);
                f32 log1_2 = FLog1_2(mant);

                return log1_2 + NW4R_LN_2 * exp_f;
            }
        }

        f32 FrSqrt(register f32 x)
        {
            register f32 a, b, c, d;
            asm
            {
                frsqrte a, x
            }

            b = 0.5f;
            c = 3.0f;

            asm
            {
                fmuls d, a, a
                fmuls a, a, b
                fnmsubs d, d, x, c
                fmuls a, d, a
            }

            return a;
        }
    }
}

#else
#error This file has yet to be decompiled accurately. Use "math_arithmetic.s" instead.
#endif